# Aoc 2023 day 02

```elixir
Mix.install([
  {:kino_aoc, "~> 0.1"}
])
```

## Input

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"2","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_SESSION"))
```

## Solution

```elixir
defmodule Aoc do
  def solve_a(input) do
    input
    |> parse_games()
    |> Enum.filter(&game_possible?(&1, 12, 13, 14))
    |> Enum.map(fn {id, _dice} -> id end)
    |> Enum.sum()
  end

  def solve_b(input) do
    input
    |> parse_games()
    |> Enum.map(&minimum_set/1)
    |> Enum.map(&set_power/1)
    |> Enum.sum()
  end

  defp parse_games(input) do
    input
    |> String.split("\n", trim: true)
    |> Enum.map(&parse_game/1)
  end

  defp parse_game(line) do
    [game_id, dice] = String.split(line, ": ")

    id =
      game_id
      |> String.replace_prefix("Game ", "")
      |> String.to_integer()

    dice_sets =
      dice
      |> String.split("; ")
      |> Enum.map(&parse_dice_set/1)

    {id, dice_sets}
  end

  defp parse_dice_set(text) do
    parsed =
      text
      |> String.split(", ")
      |> Enum.map(&String.split(&1, " "))
      |> Map.new(fn [count, color] -> {color, String.to_integer(count)} end)

    %{
      red: parsed["red"] || 0,
      green: parsed["green"] || 0,
      blue: parsed["blue"] || 0
    }
  end

  defp game_possible?({_id, dice}, red, green, blue) do
    Enum.all?(dice, fn dice_set ->
      dice_set.red <= red and dice_set.green <= green and dice_set.blue <= blue
    end)
  end

  defp minimum_set({_id, dice_sets}) do
    red = Enum.map(dice_sets, & &1.red) |> Enum.max()
    green = Enum.map(dice_sets, & &1.green) |> Enum.max()
    blue = Enum.map(dice_sets, & &1.blue) |> Enum.max()

    %{red: red, green: green, blue: blue}
  end

  defp set_power(set) do
    set.red * set.green * set.blue
  end
end
```

## Example

```elixir
example_input = """
Game 1: 3 blue, 4 red; 1 red, 2 green, 6 blue; 2 green
Game 2: 1 blue, 2 green; 3 green, 4 blue, 1 red; 1 green, 1 blue
Game 3: 8 green, 6 blue, 20 red; 5 blue, 4 red, 13 green; 5 green, 1 red
Game 4: 1 green, 3 red, 6 blue; 3 green, 6 red; 3 green, 15 blue, 14 red
Game 5: 6 red, 1 blue, 3 green; 2 blue, 1 red, 2 green
"""
```

```elixir
8 = Aoc.solve_a(example_input)
```

```elixir
2286 = Aoc.solve_b(example_input)
```

## Results

```elixir
Aoc.solve_a(puzzle_input)
```

```elixir
Aoc.solve_b(puzzle_input)
```
